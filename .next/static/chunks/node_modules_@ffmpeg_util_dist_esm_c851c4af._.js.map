{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40ffmpeg/util/dist/esm/errors.js"],"sourcesContent":["export const ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nexport const ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n"],"names":[],"mappings":";;;;AAAO,MAAM,6BAA6B,IAAI,MAAM;AAC7C,MAAM,6BAA6B,IAAI,MAAM","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40ffmpeg/util/dist/esm/const.js"],"sourcesContent":["export const HeaderContentLength = \"Content-Length\";\n"],"names":[],"mappings":";;;AAAO,MAAM,sBAAsB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40ffmpeg/util/dist/esm/index.js"],"sourcesContent":["import { ERROR_RESPONSE_BODY_READER, ERROR_INCOMPLETED_DOWNLOAD, } from \"./errors.js\";\nimport { HeaderContentLength } from \"./const.js\";\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nexport const fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nexport const importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nexport const downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nexport const toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}